name: Frontend CD

on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:

  # Automatic trigger on push events to the main branch
  push:
    branches:
      - main
  
jobs:
  lint-job:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up NodeJS
      uses: actions/setup-node@v3
      with:
        node-version: latest
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json 

    - name: Restore node_modules cache
      uses: actions/cache@v3
      with:
        path: starter/frontend/node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('starter/frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-

    - name: Install Dependencies
      run: |
        cd starter/frontend
        npm ci

    - name: Lint
      run: |
        cd starter/frontend        
        npm run lint

  test-job:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up NodeJS
      uses: actions/setup-node@v3
      with:
        node-version: latest
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json

    - name: Restore node_modules cache
      uses: actions/cache@v3
      with:
        path: starter/frontend/node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('starter/frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-

    - name: Install Dependencies
      run: |
        cd starter/frontend
        npm ci

    - name: Test
      run: |
        cd starter/frontend        
        npm run test

  build-and-push-job:
    needs: [lint-job, test-job]
    runs-on: ubuntu-latest

    outputs:
        image_url: ${{ steps.ecr.outputs.image_url }}
        
    steps:
    - name: Check out code
      uses: actions/checkout@v3    

    - name: Set up NodeJS
      uses: actions/setup-node@v3
      with:
        node-version: latest
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json

    - name: Restore node_modules cache
      uses: actions/cache@v3
      with:
        path: starter/frontend/node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('starter/frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-

    - name: Install Dependencies
      run: |
        cd starter/frontend
        npm ci

    - name: Build Project
      run: |
        cd starter/frontend        
        npm run test    
   
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}        
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push docker image to Amazon ECR
      id: ecr
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        IMAGE_URL=$REGISTRY/$REPOSITORY:$IMAGE_TAG
        echo "Building image:$IMAGE_URL"
        cd starter/frontend
        docker build --build-arg=REACT_APP_MOVIE_API_URL=http://backend.default.svc.cluster.local -t $IMAGE_URL .          
        # docker push $IMAGE_URL
        echo "image_url=$IMAGE_URL" >> $GITHUB_OUTPUT

  deploy-job:
    needs: [build-and-push-job]
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}        
        aws-region: us-east-1
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Install kustomize
      run: |
        curl -LO "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v5.0.3/kustomize_v5.0.3_linux_amd64.tar.gz"
        tar -xzf kustomize_v5.0.3_linux_amd64.tar.gz
        sudo mv kustomize /usr/local/bin/

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}

    - name: Deploy to Kubernetes
      run: |        
        IMAGE_URL=${{needs.build-and-push-job.outputs.image_url}}
        echo "Deploying image $IMAGE_URL"
        cd starter/frontend/k8s
        kustomize edit set image frontend=$IMAGE_URL
        kustomize build | kubectl apply -f -
